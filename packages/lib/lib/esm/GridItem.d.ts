import React from "react";
import { GridDragStopEvent } from "./utils";
import type { ReactElement } from "react";
import type { GridDragEvent, GridResizeEvent, DroppingPosition } from "./utils";
import type { ResizeHandleAxis, ResizeHandle } from "./types";
export type GridItemCallback<Data extends GridDragEvent | GridResizeEvent> = (value: {
    i: string;
    x: number;
    y: number;
    data: Data;
}) => void;
type Props = {
    children: ReactElement<any>;
    margin: [number, number];
    containerPadding: [number, number];
    rowHeight: number;
    maxRows: number;
    isDraggable: boolean;
    isResizable: boolean;
    isBounded: boolean;
    static?: boolean;
    useCSSTransforms?: boolean;
    usePercentages?: boolean;
    transformScale?: number;
    droppingPosition?: DroppingPosition;
    cols: number;
    containerWidth: number;
    className?: string;
    style?: Object;
    cancel?: string;
    handle?: string;
    minW?: number;
    maxW?: number;
    minH?: number;
    maxH?: number;
    x: number;
    y: number;
    z: number;
    w: number;
    h: number;
    i: string;
    resizeHandles?: ResizeHandleAxis[];
    resizeHandle?: ResizeHandle;
    onDrag?: GridItemCallback<GridDragEvent>;
    onDragStart?: GridItemCallback<GridDragEvent>;
    onDragStop?: GridItemCallback<GridDragStopEvent>;
    onResize?: GridItemCallback<GridResizeEvent>;
    onResizeStart?: GridItemCallback<GridResizeEvent>;
    onResizeStop?: GridItemCallback<GridResizeEvent>;
};
type DefaultProps = {
    className: string;
    cancel: string;
    handle: string;
    minH: number;
    minW: number;
    maxH: number;
    maxW: number;
    transformScale: number;
};
declare const GridItem: (props: Props & Partial<DefaultProps>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
export default GridItem;
